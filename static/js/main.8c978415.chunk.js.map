{"version":3,"sources":["Play.js","App.js","serviceWorker.js","index.js"],"names":["Play","react_default","a","createElement","lib_default","url","playStatus","Sound","status","PLAYING","GlobalStyle","createGlobalStyle","_templateObject","pinkTones","keyframes","_templateObject2","TheText","styled","div","_templateObject3","Margin","_templateObject4","Boolean","window","location","hostname","match","ReactDOM","render","_useState","useState","_useState2","Object","slicedToArray","play","setPlay","onClick","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSAOeA,EAAA,kBACbC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEG,IAAI,YACJC,WAAYC,IAAMC,OAAOC,onCCA7B,IAAMC,EAAcC,YAAHC,KAQXC,EAAYC,YAAHC,KAcTC,EAAUC,IAAOC,IAAVC,IAgBEN,GASTO,EAASH,IAAOC,IAAVG,KC7CQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cFsDD,WAAM,IAAA0B,EACKC,oBAAS,GADdC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACZK,EADYH,EAAA,GACNI,EADMJ,EAAA,GAInB,OAAO9B,EAAAC,EAAAC,cAACiB,EAAD,KACLnB,EAAAC,EAAAC,cAACO,EAAD,MACAT,EAAAC,EAAAC,cAACa,EAAD,KACEf,EAAAC,EAAAC,cAAA,OAAKiC,QALU,kBAAMD,GAASD,KAK9B,QACOjC,EAAAC,EAAAC,cAAA,WADP,QAIAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,wDAED+B,GAAQjC,EAAAC,EAAAC,cAACH,EAAD,QEvEG,MAASqC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8c978415.chunk.js","sourcesContent":["/*\n© 2018-present Harald Rudell <harald.rudell@gmail.com> (http://www.haraldrudell.com)\nThis source code is licensed under the ISC-style license found in the LICENSE file in the root directory of this source tree.\n*/\nimport React from 'react'\nimport Sound from 'react-sound'\n\nexport default () =>\n  <Sound\n    url='/Fame.mp3'\n    playStatus={Sound.status.PLAYING}\n  />\n","/*\n© 2018-present Harald Rudell <harald.rudell@gmail.com> (http://www.haraldrudell.com)\nThis source code is licensed under the ISC-style license found in the LICENSE file in the root directory of this source tree.\n*/\nimport React, { useState } from 'react'\nimport styled, { keyframes, createGlobalStyle } from 'styled-components'\nimport './fonts.css'\nimport './fonts/bladeRunner.css'\nimport Play from './Play'\n\nconst GlobalStyle = createGlobalStyle`\nbody, html {\n  height: 100%\n}\n#root {\n  min-height: 100%;\n  background: radial-gradient(100% 100% at left 15% top 15%, #f2e5cd, #f9c7c7);\n}`\nconst pinkTones = keyframes`\n  from {\n    color: hsl(0, 80%, 50%); // red\n  }\n  33% {\n    color: black;\n  }\n  66% {\n    color: hsl(280, 80%, 50%);\n  }\n  to {\n    color: hsl(360, 80%, 50%);\n  }\n`\nconst TheText = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\ndiv:nth-child(1) {\n  font: bolder 50pt 'Blade Runner';\n  color: red;\n  margin-bottom: 10vh;\n  text-shadow: 0px 1px 4px #23430C;\n  text-align: center;\n}\ndiv:nth-child(2) {\n  font: bolder 50pt Arial;\n}\ndiv:nth-child(3), div:nth-child(5) {\n  font: bolder 50pt 'Baloo Tamma';/*Arial, Helvetica, sans-serif*/\n  animation: ${pinkTones} 8s linear infinite;\n}\ndiv:nth-child(4) {\n  font: bolder 32pt Arial;\n}\ndiv {\n  margin-bottom: 24px;\n}\n`\nconst Margin = styled.div`\npadding-top: 10vh\n`\nexport default () => {\n  const [play, setPlay] = useState(false)\n  const togglePlay = () => setPlay(!play)\n\n  return <Margin>\n    <GlobalStyle />\n    <TheText>\n      <div onClick={togglePlay}>\n        react<br/>\n        fame\n      </div>\n      <div>Hire</div>\n      <div>Harald Rudell</div>\n      <div>Node Go React Java</div>\n      <div>harald.rudell@gmail.com</div>\n      <div>[ click REACT FAME for Irene Cara 1980 ]</div>\n    </TheText>\n    {play && <Play />}\n  </Margin>\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}